{"version":3,"sources":["components/Clima.js","components/Formulario.js","components/Header.js","helpers/consultarAPI.js","App.js","serviceWorker.js","index.js"],"names":["Clima","resultado","main","name","cod","className","parseFloat","temp","toFixed","temp_max","temp_min","Formulario","formulario","setFormulario","setCosultaReady","useState","error","setError","ciudad","pais","handleChange","target","value","onSubmit","e","preventDefault","trim","type","id","onChange","htmlFor","Header","title","href","consultarAPI","a","url","encodeURI","fetch","respuesta","json","App","cosultaReady","setResultado","useEffect","then","res","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6c28136.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Clima = ( { resultado } ) => {\r\n\r\n    const { main, name, cod } = resultado;\r\n\r\n    if(!cod) return null;\r\n\r\n    return (\r\n        <>\r\n        {\r\n            (cod === '404')\r\n            ?\r\n                <div className=\"card-panel white col s12\">\r\n                    <div className=\"black-text\">\r\n                        <h2>Clima de ciudad no encontrado</h2>\r\n                    </div>\r\n                </div>\r\n            :\r\n                \r\n                <div className=\"card-panel white col s12\">\r\n                    <div className=\"black-text\">\r\n                        <h2>El clima de {name} es: </h2>\r\n                        <p className=\"temperatura\">\r\n                            { parseFloat(main.temp - 273.15, 10).toFixed(2)} <span> &#x2103;</span>\r\n                        </p>\r\n                        <p>Temperatura Máx:&nbsp; \r\n                            { parseFloat(main.temp_max - 273.15, 10).toFixed(2)} <span> &#x2103;</span>\r\n                        </p>\r\n                        <p>Temperatura Mín:&nbsp; \r\n                            { parseFloat(main.temp_min - 273.15, 10).toFixed(2)} <span> &#x2103;</span>\r\n                        </p>\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ( { formulario,setFormulario,setCosultaReady } ) => {\r\n\r\n\r\n    const [error, setError] = useState(false)\r\n    const { ciudad, pais }= formulario;\r\n\r\n    //Manejar el cambio de cada campo\r\n    const handleChange = ( { target } ) =>{\r\n        //Actualizar el state\r\n        setFormulario({\r\n            ...formulario,\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    //Manejar el submit\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        \r\n        //Validar datos\r\n        if(ciudad.trim() === '' || pais.trim() === ''){\r\n            setError(true)\r\n            return\r\n        }\r\n        setError(false)\r\n\r\n        //Pasar Ready al componente principal\r\n        setCosultaReady(true)\r\n\r\n    }\r\n\r\n    return (\r\n        <form \r\n            onSubmit={ handleSubmit }\r\n        >  \r\n            { error && <p className=\"red darken-4 error\">Todos los campos son obligatorios</p>}\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    value={ ciudad }\r\n                    onChange={ handleChange }\r\n                />\r\n                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={ pais }\r\n                    onChange={ handleChange }\r\n                >\r\n                    <option value=\"\">-- Seleccione un País --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"PA\">Panamá</option>\r\n                    <option value=\"CU\">Cuba</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>                  \r\n                    <option value=\"ES\">España</option>\r\n                    \r\n                </select>\r\n                <label htmlFor=\"pais\">País: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Consultar Clima\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n                />\r\n \r\n            </div>\r\n        </form> \r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    formulario: PropTypes.object.isRequired,\r\n    setFormulario: PropTypes.func.isRequired,\r\n    setCosultaReady: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ( { title } ) => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <a \r\n                    href=\"#!\" \r\n                    className=\"brand-logo\"\r\n                >\r\n                    { title }\r\n                </a>\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header\r\n","\r\n\r\nexport const consultarAPI = async(ciudad,pais) => {\r\n   \r\n    const APIKey = '863d82023d099a0da9b2f945d8490318';\r\n    \r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${ encodeURI(ciudad) },${encodeURI(pais) }&appid=${encodeURI(APIKey)}`;\r\n    \r\n    const respuesta = await fetch(url);\r\n    const resultado = await respuesta.json();\r\n    \r\n    return resultado;\r\n}","import React, { useEffect, useState } from 'react';\nimport Clima from './components/Clima';\nimport Formulario from './components/Formulario';\nimport Header from './components/Header';\nimport { consultarAPI } from './helpers/consultarAPI';\n\n\n\nfunction App() {\n\n  // state de valores del formulario\n  const [formulario, setFormulario] = useState({\n    ciudad: '',\n    pais: ''\n  })\n  \n  const [cosultaReady, setCosultaReady] = useState(false)\n  \n  const [resultado, setResultado] = useState({})\n\n  const { ciudad, pais }= formulario;\n\n  useEffect( () => {\n \n    if(cosultaReady){\n\n      consultarAPI(ciudad,pais)\n        .then( res =>{\n\n          setResultado({\n            ...res\n          });\n\n        });\n      setCosultaReady(false);\n\n    }\n    \n    // eslint-disable-next-line\n  }, [cosultaReady]);\n\n  ;\n\n  return (\n    <>\n      <Header\n        title='Clima React APP'\n      />\n      \n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                formulario= { formulario }\n                setFormulario= { setFormulario }\n                setCosultaReady= { setCosultaReady }\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              <Clima\n                resultado = { resultado }\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}